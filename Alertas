Option Compare Database

'Declara as variáveis globais
Public strHTMLTabela As String
Public strHTMLTabela2 As String
Public strHTMLTabelaEstatica As String
Public strHTMLTabelaEstaticaCorpo As String
Public strHTMLTabelaEstaticaCabecalho As String
Public LinhasTabela As Variant
Public IdAutomacao As Integer
Public qtdeLinhas As Integer
Public CaminhoRede As String
Public NomeDoCliente As String
Public Peridiocidade As String
Public NomeDaAutomacao As String
Public EmCQMaiorDoisDiasLinhaDoTitulo As String
Public EmCQMaiorDoisDiasColunasDaTabela As String
Public MensagemArquivoAcimaDoTamanhoLimite As String
Public InicioDoProcessamento  'Variável para mensurar o tempo de processamento
Public DataInicioDoProcessamento 'Variável para mensurar o tempo de processamento
Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr) ' Método de tempo de espera Sleep



Public Function RotinaPrincipal()

Dim horaAtual As Date
Dim horaFinal As Date
Dim horaInicial As Date
    
    
    
'Ativa (True) ou Desativa (False) avisos padrão do Access
DoCmd.SetWarnings False



'Tratamento de erro
On Error GoTo TratarErro



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
horaAtual = Time
horaInicial = TimeValue("09:25:00")
horaFinal = TimeValue("09:35:00")



If horaAtual >= horaInicial And horaAtual <= horaFinal Then

    '__________ COBRANÇA __________'
    'Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaCobrancaReembolsoAcima10DiasSemAtuacao
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaDocEletronicosIQe

Else

    '_____________________________ CHAMA AS ROTINAS _____________________________
    '__________ NEGOCIE DIGITAL __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaAnaliseNegocieDigitalQuinzenal
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNegocieDigitalBaseNaoProcessada
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNegocieDigitalBaseNaoRecebida
    
    '__________ REGISTRO __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaRegistroFollowPD
    
    '__________ ANÁLISE JURIDICA __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaAnaliseJuridicaForecast
    
    '__________ INTIMAÇÃO __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaIntimacaoDuplicidades
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaIntimacaoEmCQMaiorDoisDias
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaIntimacaoInconsistencias
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaIntimacaoSLA
    
    '__________ COBRANÇA __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaCobrancaNaoAcionados
    
    '__________ NOTIFICAÇÃO __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNotificacaoDuplicidade
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNotificacaoEstoque
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNotificacaoPostagem
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaNotificacaoVolume
    
    '__________ PROTESTO __________'
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaProtestoAptoCQ
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaProtestoIrregularidade
    Call PDtec_MIS_EnvioAlertas.Rotina.RotinaAlertaProtestoEstoque

End If



'Ativa (True) ou Desativa (False) avisos padrão do Access
DoCmd.SetWarnings True



'_____________________________  ENCERRA O ACCESS _____________________________
DoCmd.Quit



'_____________________________  TRATAMENTO E REGISTRO DE ERRO _____________________________
TratarErro:
    Debug.Print Err.Number
    Debug.Print Err.Description
    If Err.Number <> 0 Then
        Call Mdl_Emails.EnviaEmailErro("erro.automacao@pd.tec.br", "planejamento@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, Err.Number, Err.Description, DataInicioDoProcessamento)
    End If

End Function



Public Sub CriaCaminhoRede(NomeDaPasta As String)
'Passe o nome do alerta como parametro para busar o caminho na rede e gerenciar a pasta

'Atribui a variável o caminho da rede e concatena com a pasta que os dados serão salvos
CaminhoRede = "\\fsapps\Shares2\Relatorios-MIS\PDtec_MIS_EnvioAlertas\" & NomeDaPasta & "\"

'Testa se tem acesso a rede
Call Mdl_Conexao.TestaAcessoDaRede(CaminhoRede, NomeDoCliente, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento)

'Gerencia as pastas apagando o histórico que for superio a qtde de dias informados
Call Mdl_Conexao.GerenciaPastasEArquivos(CaminhoRede, 365)

'Local onde os relatórios são salvos | Novo caminho da rede
CaminhoRede = Mdl_Funcoes.CriaPastaDestino(CaminhoRede)

End Sub


Public Function ValidaFrequencia(Valor As String) As Boolean
'Função para identificar se a rotina deve ser executada no dia atual

Dim RetornaFrequenciaMaiuscula As String
Dim RetornaDiaSemanaMaiuscula As String
Dim ProcuraDiaSemanaNoParametro As Integer

'Para evitar conflitos pelas diferenças de nomenclatura
If Valor = "Diário" Then Valor = "DIARIO"

'Atribui valor as variáveis fazendo as verificações necessárias
RetornaFrequenciaMaiuscula = Trim(StrConv(Valor, vbUpperCase))
RetornaDiaSemanaMaiuscula = StrConv(Format(Now, "DDD"), vbUpperCase)
ProcuraDiaSemanaNoParametro = InStr(RetornaFrequenciaMaiuscula, RetornaDiaSemanaMaiuscula)

'Se o valor do parâmetro é igual a 1 retorna TRUE
If ProcuraDiaSemanaNoParametro >= 1 Then
    ValidaFrequencia = True
'Se o valor do parâmetro é igual a palavra DIARIO retorna TRUE
ElseIf InStr(RetornaFrequenciaMaiuscula, "DIARIO") >= 1 Then
    ValidaFrequencia = True
Else
    ValidaFrequencia = False
End If

End Function


Function PrimeiroDiaUtilDoMes(ano As Integer, mes As Integer) As Date
Dim data As Date

data = DateSerial(ano, mes, 1) ' Obtenha o dia 1 do mês

' Verifique se o dia 1 é um fim de semana (sábado ou domingo)
While Weekday(data, vbMonday) > 5 ' Se for sábado (6) ou domingo (7)
    data = DateAdd("d", 1, data) ' Avance para o próximo dia
Wend

PrimeiroDiaUtilDoMes = data

End Function



Function VerificarQuinzena() As String
'Essa função tem o objetivo de verificar se estamos na quinzena do mês

'Declara as variáveis locais
Dim Quinzena As String
Dim DiaAtual As Integer
Dim UltimoDiaDoMes As Integer

'Retorna o dia atual
DiaAtual = Day(Date)

'Retorna o ultimo dia do mês com base no dia atual
UltimoDiaDoMes = Day(DateSerial(Year(Date), Month(Date) + 1, 0))

'Verifica se o dia atual está na primeira ou segunda quinzena
If DiaAtual <= (UltimoDiaDoMes / 2) Then
    Quinzena = "QUINZENAL"
Else
    Quinzena = "QUINZENAL"
End If

VerificarQuinzena = Quinzena

End Function



Public Function RotinaAlertaAnaliseNegocieDigitalQuinzenal()
'Tabela: TBL_ALETAS
'Procedure: PR_ALERTA_QUINZENAL_15DIAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaAnaliseNegocieDigitalQuinzenal"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasAnaliseQuinzenal"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "ANÁLISE QUINZENAL"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing


'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM BI_PLANEJAMENTO_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM BI_PLANEJAMENTO_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM BI_PLANEJAMENTO_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
    
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 7
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "BI_PLANEJAMENTO_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM BI_PLANEJAMENTO_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaAnaliseQuinzenal")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioAlertaAnaliseQuinzenal", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioAlertaAnaliseQuinzenal", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaAnaliseQuinzenal")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("AnaliseQuinzenal")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta AnaliseQuinzenal_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaAnaliseQuinzenal", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioAlertaAnaliseQuinzenal"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM BI_PLANEJAMENTO_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Substituo a primeira virgula pela tag <br> que pula linha
                PosicaoDaPrimeiraVirgula = InStr(rstBaseAlertas("CORPOEMAIL"), ",")
                'Atribui a variável o assunto do email
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " - " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
                'Corpo do e-mail
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailAnaliseQuinzenal(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function


Public Function RotinaAlertaIntimacaoInconsistencias()
'Intimação e Consolidação: Faz apenas o envios dos alertas de duplicidade | Envia um e-mail por cliente e por produto
'Procedure: PR_INTIMACAO_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstTabela As DAO.Recordset
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaIntimacaoInconsistencias"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasInconsistencias"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "INCONSISTÊNCIAS"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
                
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaInconsistencias")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioAlertaInconsistencias", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioAlertaInconsistencias", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaInconsistencias")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("Inconsistencias")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta Inconsistencias_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaInconsistencias", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioAlertaInconsistencias"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailInconsistencias(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstTabela = Nothing
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstTabela = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaIntimacaoSLA()
'Intimação e Consolidação: Faz apenas o envios dos alertas de duplicidade | Envia um e-mail por cliente e por produto
'Procedure: PR_INTIMACAO_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaSLA As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaIntimacaoSLA"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasSLA"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "SLA"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
    
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaSLA")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioAlertaSLA", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioAlertaSLA", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaSLA")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("SLA")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta SLA_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaSLA", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioAlertaSLA"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - SLA | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailSLA(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaCobrancaNaoAcionados()
'Cobrança: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_COBRANCA_ALERTA

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstTabela As DAO.Recordset
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset


Debug.Print "RotinaAlertaCobrancaNaoAcionados"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasNaoAcionados"
Peridiocidade = "Diaria"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "NÃO ACIONADOS"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
'Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
'If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
    
                'Debug.Print rstListaClientes("CLIENTE")
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioNaoAcionados")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioNaoAcionados", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioNaoAcionados", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioNaoAcionados")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("NaoAcionados")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta NaoAcionados_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioNaoAcionados", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioNaoAcionados"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Troco a vírgula pela tag <br> que pula linha
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & rstBaseAlertas("CLIENTE") & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailNaoAcionados(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstTabela = Nothing
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstTabela = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNegocieDigitalBaseNaoRecebida()
'Negocie Digital: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaNegocieDigitalBaseNaoRecebida"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasBaseNaoRecebida"
Peridiocidade = "Diaria"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "BASE NÃO RECEBIDA "
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")
'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("BaseNaoRecebida")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
    
                'Debug.Print rstListaClientes("CLIENTE")
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "POWERBI_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                 
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM POWERBI_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioBaseNaoRecebida")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioBaseNaoRecebida", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioBaseNaoRecebida", acSaveYes



                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioBaseNaoRecebida"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM POWERBI_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Troco a vírgula pela tag <br> que pula linha
                CorpoDoEmail = Replace(rstBaseAlertas("CORPOEMAIL"), ".", ",<br>")
                
                If rstBaseAlertas("CLIENTE") = "BASE_RENEG_SANTANDER-FINANCIAMENTOS.csv" Then NomeCliente = "Base Renegociação Santander Financiamentos" Else NomeCliente = StrConv(rstBaseAlertas("CLIENTE"), vbProperCase)
                AssuntoEmail = "Alerta | " & NomeCliente & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
                            

                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailBaseNaoRecebida(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNegocieDigitalBaseNaoProcessada()
'Negocie Digital: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaNegocieDigitalBaseNaoProcessada"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasBaseNaoProcessada"
Peridiocidade = "Diaria"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "BASE NÃO PROCESSADA "
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")
'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("BaseNaoRecebida")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM POWERBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 7
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "POWERBI_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM POWERBI_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioBaseNaoProcessada")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioBaseNaoProcessada", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioBaseNaoProcessada", acSaveYes
  
  
  
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioBaseNaoProcessada"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM POWERBI_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                
                If rstBaseAlertas("CLIENTE") = "BASE_RENEG_SANTANDER-FINANCIAMENTOS.csv" Then NomeCliente = "Base Renegociação Santander Financiamentos" Else NomeCliente = rstBaseAlertas("CLIENTE")
                AssuntoEmail = "Alerta | " & NomeCliente & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - Base Não Processada | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailBaseNaoProcessada(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaProtestoIrregularidade()
'Negocie Digital: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_PROTESTO_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaProtestoIrregularidade"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasProtestoIrregularidade"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "IRREGULARIDADE"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 8
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "SLA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioProtestoIrregularidade")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioProtestoIrregularidade", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioProtestoIrregularidade", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioProtestoIrregularidade")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
       
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
       
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("ProtestoIrregularidade")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta Irregularidade_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioProtestoIrregularidade", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioProtestoIrregularidade"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        'Troco a vírgula pela tag <br> que pula linha
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " | Irregularidades | " & Date
    
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailProtestoIrregularidade(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        Rotina.LinhasTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaAnaliseJuridicaForecast()
'Negocie Digital: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_ALERTAS_REGISTRO_IMOBILIARIO

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset


Debug.Print "RotinaAlertaAnaliseJuridicaForecast"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next


'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasForecast"
Peridiocidade = "Quarta"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "FORECAST ABAIXO DO PREVISTO"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioForecast")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioForecast", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioForecast", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioForecast")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""

                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                    
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("Forecast")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta Forecast_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioForecast", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                          

                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioForecast"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br" 'Incluo o e-mail do planejamento no envio do alerta como cópia
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailForecast(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                Rotina.LinhasTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaRegistroFollowPD()
'Negocie Digital: Faz apenas o envios dos alertas de Não acionados | Envia um e-mail por cliente e por produto
'Procedure: PR_ALERTAS_REGISTRO_IMOBILIARIO

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstTabela As DAO.Recordset
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaRegistroFollowPD"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasFollowPD"
Peridiocidade = "Diaria"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "FOLLOW PD"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                                       
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioFollowPD")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioFollowPD", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioFollowPD", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioFollowPD")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("FollowPD")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta FollowPD_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioFollowPD", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                                
                                
                                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioFollowPD"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Troco a vírgula pela tag <br> que pula linha
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - Follow PD | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailFollowPD(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                Rotina.LinhasTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
        
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function




Public Function RotinaAlertaIntimacaoDuplicidades()
'Intimação e Consolidação: Faz apenas o envios dos alertas de duplicidade | Envia um e-mail por cliente e por produto
'Procedure: PR_INTIMACAO_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstTabela As DAO.Recordset
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaIntimacaoDuplicidades"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next


'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasDuplicidades"
Peridiocidade = "Diaria"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "DUPLICIDADES"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
                
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaDuplicidades")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioAlertaDuplicidades", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioAlertaDuplicidades", acSaveYes
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then

                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaDuplicidades")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                    
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                    
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("Duplicidades")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta Duplicidades_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaDuplicidades", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioAlertaDuplicidades"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY CONTRATO;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Troco a vírgula pela tag <br> que pula linha
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailDuplicidade(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
                
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                strHTMLTabela = ""
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                Set rstTabela = Nothing
                Set rstBaseAlertas = Nothing
                Set rstConsultaAlertas = Nothing
                
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstTabela = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function





Public Function RotinaAlertaIntimacaoEmCQMaiorDoisDias()
'Procedure: PR_INTIMACAO_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim ListaDescricaoAlerta As New Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim ConsultaClienteParaQuadroNoEmail As String
Dim ConsultaDescricaoParaQuadroNoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstTabela As DAO.Recordset
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset
Dim rstQuadroAlertasCliente As DAO.Recordset
Dim rstQuadroAlertasDescricao As DAO.Recordset
Dim QtdeDescricaoBanco As Integer

Debug.Print "RotinaAlertaIntimacaoEmCQMaiorDoisDias"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasEmCQMaiorDoisDias"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "EM CQ > 2 DIAS"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
    
        'Retorna todos os clientes cadastrados na tabela com base no tipo de alerta e produto
        Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "' ORDER BY CLIENTE")

        'Itera sobre a lista de clientes
        Do While rstListaClientes.EOF = False
        
            'Se tem dados entra nessa condição
            If rstListaClientes.EOF = False Then
    
            
                '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
                caractere = ""
                concatenaColunas = ""
                qtdeLinhas = 0
                qtdeColunas = 8
                qtdePalavras = 0
                QtdeDescricaoBanco = 0
                
                
                
                '__________________________ DESENVOLVE A CONSULTA __________________________
                'Crio uma nova coleção (Um tipo de lista)
                Set colunas = New Collection
                
                'Adiciona cada uma das colunas da tabela a nova coleção
                colunas.Add "DESCRICAO"
                colunas.Add "FAIXA"
                colunas.Add "SLA"
                colunas.Add "DATA"
                colunas.Add "UF"
                colunas.Add "MCI_PASTA"
                colunas.Add "CONTRATO"
                colunas.Add "PROCESSOID"
                               
                'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
                For Each coluna In colunas
                    
                    'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
                    qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
                    
                    'Se a quantidade de linhas é maior que zero entra nessa condição
                    'A cada nova iteração concatena o NOME DA COLUNA para montar a query
                    If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
                    'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
                    If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
                    'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
                    If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
                    
                Next coluna
                
                'Faz o tratamento da variável para remover vazios no fim da junção das colunas
                concatenaColunas = RTrim(concatenaColunas)
                'Verifica se o ultimo caractere é uma virgula
                caractere = Right(concatenaColunas, 1)
                'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
                qtdePalavras = Len(concatenaColunas)
                'Remove o ultimo caractere da palavra se for uma virgula
                If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
                
                'Atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY PROCESSOID;"
                        
                'Cria uma nova consulta e atribui a variável
                Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaEmCQMaiorDoisDias")
                
                'Atribui a consulta que foi criada vazia a query com os dados
                rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
                
                'Executa a consulta SQL para atualizar seus dados
                'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
                DoCmd.OpenQuery "RelatorioAlertaEmCQMaiorDoisDias", acViewNormal, acReadOnly
                
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
                
                'Fecha a consulta salvando e atualizando
                DoCmd.Close acQuery, "RelatorioAlertaEmCQMaiorDoisDias", acSaveYes
                
                
                '__________________________ TABELA DO CORPO DO E-MAIL __________________________
                'Cria uma lista com as descrições e atribui a variável os dados que serão utilizados para preencher o relatório
                 ConsultaDescricaoParaQuadroNoEmail = "SELECT DISTINCT DESCRICAO " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "ALERTA = '" & Alerta & "' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "'; "
                        
                'Cria uma nova consulta e atribui a variável
                Set rstQuadroAlertasDescricao = CurrentDb.OpenRecordset(ConsultaDescricaoParaQuadroNoEmail)
                
                'Itero sobre as linhas da coluna de clientes
                Do While rstQuadroAlertasDescricao.EOF = False
                    
                    'A cada nova iteração atribui a coleção o nome do cliente
                    ListaDescricaoAlerta.Add rstQuadroAlertasDescricao("DESCRICAO").Value
                    'Vai para o próximo cliente
                    rstQuadroAlertasDescricao.MoveNext
                
                Loop

                'Antes de iterar sobre as colunas criamos a coluna da DESCRIÇÃO
                LinhaDoTitulo = "<td style='font-size:12px; width:160px'><center><b>DESCRIÇÃO<b></center></td>"

                'Cria a coluna
                LinhaDoTitulo = LinhaDoTitulo & "<td style='font-size:12px; width:100px'><center><b>" & rstListaClientes("CLIENTE") & "</b></center></td>"

                'Atribui a linha que contém as colunas a tag tr que representa uma linha na tabela
                EmCQMaiorDoisDiasLinhaDoTitulo = "<tr>" & LinhaDoTitulo & "</tr>"
            

                'Cria a linha dos titulos
                For Each DESCRICAO In ListaDescricaoAlerta

                    'Verifica se tem dados na variável
                    If IsNull(DESCRICAO) = False And IsEmpty(DESCRICAO) = False And DESCRICAO <> "" Then
                    
                        'Monta a linha do produto
                        ColunaDaDescricao = ColunaDaDescricao & "<tr><td style='font-size:12px;'><b>" & DESCRICAO & "</b></td>"
                           
                        'Atribui a variável a contagem por cliente e descrição
                        QtdeDescricaoBanco = DCount("ALERTA", "PDIMOB_R_TBL_ALERTAS", "ALERTA = 'EM CQ > 2 DIAS' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND DESCRICAO = '" & DESCRICAO & "'")
                        
                        'Se retornar nulo atribui a variável o valor zero
                        QtdeDescricaoBanco = Nz(QtdeDescricaoBanco, 0)
                        
                        'Concatena a variável que terá o valor da célula a cada nova iteração
                        LinhaDaDescricao = LinhaDaDescricao & "<td style='font-size:12px;'><center>" & QtdeDescricaoBanco & "</center></td>"

                        'Fecha a linha a cada iteração concatenando as variávis que foram criadas
                        ColunaDaDescricao = ColunaDaDescricao & LinhaDaDescricao & "</tr>"
                        
                        QtdeTotalDescricaoBanco = QtdeDescricaoBanco + QtdeTotalDescricaoBanco
                        
                        'Limpa as variáveis a cada nova iteração
                        LinhaDaDescricao = ""
                    
                    End If
                    
                Next DESCRICAO
                
                'Cria a linha com o titulo do total geral
                ColunaDaDescricao = ColunaDaDescricao & "<tr><td style='font-size:12px;'><b>TOTAL GERAL</b></td>"
                
                'Cria a linha com a quantidade total geral
                LinhaDaDescricao = LinhaDaDescricao & "<td style='font-size:12px;'><center>" & QtdeTotalDescricaoBanco & "</center></td>"
                
                'Fecha a tabela
                EmCQMaiorDoisDiasColunasDaTabela = ColunaDaDescricao & LinhaDaDescricao & "</tr>"
                
                
                
                '__________________________ GERA TABELA OU ANEXO __________________________
                'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
                If totalLinhas <= 30 And qtdeColunas >= 2 Then
                
                    '__________________________ TABELA __________________________
                    'Atribui a variável o resultado da consulta criada
                    Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaEmCQMaiorDoisDias")
                    
                    'Cria a tabela que vai no corpo do e-mail
                    If Not rstTabela.EOF Then
                    
                        'Inicializa a string HTML com a tag da tabela
                        strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
                    
                        'Abre a primeira linha para o cabeçalho (TAG tr)
                        strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                        'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                        For Each Campo In rstTabela.Fields
                            strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                        Next Campo
                    
                        'Fecha a linha do cabeçalho
                        strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                        'Itera sobre os registros da consulta para criar as linhas da tabela
                        Do While Not rstTabela.EOF
                            'Abre uma nova linha para cada registro (TAG tr)
                            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
                    
                            'Itera sobre os campos do registro para criar as células
                            For Each Campo In rstTabela.Fields
                                ValorCelula = Campo.Value
                                strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                            Next Campo
                    
                            'Fecha a linha do registro
                            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
                    
                            'Vai para o próximo registro
                            rstTabela.MoveNext
                        Loop
                    
                        'Fecha a tabela HTML
                        strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
                    End If
                    
                    'Fechando o registroset
                    rstTabela.Close
                
                    'Limpa as variáveis para evitar erros no envio de anexos
                    NomeArquivo = ""
                    PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
                
                'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
                ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
                
                    'Vai ser enviado o anexo então não essa variável precisa ser limpa
                    strHTMLTabela = ""
                
                    'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
                    Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("EmCQMaiorDoisDias")
                    
                    '__________________________ EXPORTA ARQUIVO ANEXO __________________________
                    '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
                    NomeArquivo = "Alerta EmCQ2Dias_" & StrConv(rstListaClientes("CLIENTE"), vbProperCase) & " - " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
                    Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaEmCQMaiorDoisDias", CaminhoRede, NomeArquivo, Alerta)
                
                End If
                
                
                
                '__________________________ EXCLUSÃO DA CONSULTA __________________________
                CurrentDb.QueryDefs.Delete "RelatorioAlertaEmCQMaiorDoisDias"
                
                
                
                '__________________________ ENVIO DO EMAIL __________________________
                'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
                ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
                    "FROM PDIMOB_R_TBL_ALERTAS " & _
                    "WHERE " & _
                        "UCASE(ALERTA) = 'EM CQ > 2 DIAS' AND " & _
                        "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' AND " & _
                        "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                        "ORDER BY PROCESSOID;"
                
                'Atribui a variável os dados da consulta para envio do e-mail
                Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
                
                'Atribui o valor as variáveis
                Remetente = "relatorios@pd.tec.br"
                Destinatarios = rstBaseAlertas("DESTINATARIOS")
                'Incluo o e-mail do planejamento no envio do alerta como cópia
                EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
                'Troco a vírgula pela tag <br> que pula linha
                CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
                AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("CLIENTE"), vbProperCase) & " | " & StrConv(rstListaProdutos("PRODUTO"), vbProperCase) & " - " & "Em CQ > 2 Dias" & " | " & Date
            
                'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
                Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailEmCQMaiorDoisDia(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
        
        
        
                '_____________________________  LIMPA AS VARIÁVEIS _____________________________
                totalLinhas = 0
                Remetente = ""
                strHTMLTabela = ""
                AssuntoEmail = ""
                CorpoDoEmail = ""
                EmailsEmCopia = ""
                Destinatarios = ""
                LinhaDoTitulo = ""
                LinhaDaDescricao = ""
                ColunaDaDescricao = ""
                QtdeTotalDescricaoBanco = 0
                ConsultaDadosParaRelatorio = ""
                ConsultaDadosParaEnvioDoEmail = ""
                PDtec_MIS_EnvioAlertas.Rotina.EmCQMaiorDoisDiasLinhaDoTitulo = ""
                PDtec_MIS_EnvioAlertas.Rotina.EmCQMaiorDoisDiasColunasDaTabela = ""
                Set rstTabela = Nothing
                Set rstBaseAlertas = Nothing
                Set ListaNomeClientes = Nothing
                Set rstConsultaAlertas = Nothing
                Set ListaDescricaoAlerta = Nothing
                Set rstQuadroAlertasCliente = Nothing
                Set rstQuadroAlertasDescricao = Nothing
                
                '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
                PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
                'Vai para o próximo cliente
                rstListaClientes.MoveNext
            
            End If
            
        Loop
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstTabela = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNotificacaoVolume()
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaNotificacaoVolume"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasNotificacaoVolume"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "VOLUME"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"

        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PORTALE_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaVolume")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaVolume", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaVolume", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaVolume")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black>" & ValorCelula & "</td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
        
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("Volume")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta Volume_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaVolume", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaVolume"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " | " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
    
        
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailNotificacaoVolume(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
    
    
    
        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing
    
        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNotificacaoDuplicidade()
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset


Debug.Print "RotinaAlertaNotificacaoDuplicidade"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasNotificacaoDuplicidade"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "DUPLICIDADE"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PORTALE_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaNotificacaoDuplicidade")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaNotificacaoDuplicidade", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaNotificacaoDuplicidade", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaNotificacaoDuplicidade")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
    
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""

            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("NotificacaoDuplicidade")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta NotificacaoDuplicidade_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaNotificacaoDuplicidade", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaNotificacaoDuplicidade"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        'Substituo a primeira virgula pela tag <br> que pula linha
        PosicaoDaPrimeiraVirgula = InStr(rstBaseAlertas("CORPOEMAIL"), ",")
        'Atribui a variável o assunto do email
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")

        
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailNotificacaoDuplicidade(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNotificacaoEstoque()
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset



Debug.Print "RotinaAlertaNotificacaoEstoque"



'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasNotificacaoEstoque"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "ESTOQUE"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PORTALE_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Debug.Print DCount("*", "PORTALE_TBL_ALERTAS", "DATA IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaNotificacaoEstoque")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaNotificacaoEstoque", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaNotificacaoEstoque", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaNotificacaoEstoque")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
        
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("NotificacaoEstoque")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta NotificacaoEstoque_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaNotificacaoEstoque", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaNotificacaoEstoque"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        'Substituo a primeira virgula pela tag <br> que pula linha
        PosicaoDaPrimeiraVirgula = InStr(rstBaseAlertas("CORPOEMAIL"), ",")
        'Atribui a variável o assunto do email
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")

        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailNotificacaoEstoque(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaNotificacaoPostagem()
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaNotificacaoPostagem"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasNotificacaoPostagem"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "POSTAGEM"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PORTALE_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PORTALE_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaNotificacaoEstoque")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaNotificacaoEstoque", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaNotificacaoEstoque", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaNotificacaoEstoque")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
        
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("NotificacaoEstoque")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta NotificacaoEstoque_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaNotificacaoEstoque", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaNotificacaoEstoque"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PORTALE_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        'Substituo a primeira virgula pela tag <br> que pula linha
        PosicaoDaPrimeiraVirgula = InStr(rstBaseAlertas("CORPOEMAIL"), ",")
        'Atribui a variável o assunto do email
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL") & "<br>"

        
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailNotificacaoPostagem(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function




Public Function RotinaAlertaProtestoAptoCQ()

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset


Debug.Print "RotinaAlertaProtestoAptoCQ"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasProtestoAptoCQ"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "APTO CQ"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaProtestoAptoCQ")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaProtestoAptoCQ", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaProtestoAptoCQ", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaProtestoAptoCQ")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black>" & ValorCelula & "</td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
    
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("AptoCQ")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta AptoCQ_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaProtestoAptoCQ", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaProtestoAptoCQ"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " | Apto CQ | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL") & "<br>"
    
        
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailProtestoAptoCQ(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
    
    
    
        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing
    
        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function




Public Function RotinaAlertaProtestoEstoque()
'Procedure: PR_ALERTAS

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset

Debug.Print "RotinaAlertaProtestoEstoque"

'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasProtestoEstoque"
Peridiocidade = "Semanal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "ESTOQUE"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PDIMOB_R_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then
            
        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 7
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "DESCRICAO"
        colunas.Add "FAIXA"
        colunas.Add "DATA"
        colunas.Add "UF"
        colunas.Add "MCI_PASTA"
        colunas.Add "CONTRATO"
        colunas.Add "PROCESSOID"
        colunas.Add "CLIENTE"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PDIMOB_R_TBL_ALERTAS", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND PRODUTO = '" & rstListaProdutos("PRODUTO") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaProtestoEstoque")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaProtestoEstoque", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaProtestoEstoque", acSaveYes
        
        
        
        '__________________________ GERA TABELA OU ANEXO __________________________
        'Se a quantidade de linhas é inferior ou igual a 30 vai gerar a tabela no corpo do email
        If totalLinhas <= 30 And qtdeColunas >= 2 Then
        
            '__________________________ TABELA __________________________
            'Atribui a variável o resultado da consulta criada
            Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaProtestoEstoque")
            
            'Cria a tabela que vai no corpo do e-mail
            If Not rstTabela.EOF Then
            
                'Inicializa a string HTML com a tag da tabela
                strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
            
                'Abre a primeira linha para o cabeçalho (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                'Itera sobre os campos da consulta para criar o cabeçalho da tabela
                For Each Campo In rstTabela.Fields
                    strHTMLTabela = strHTMLTabela & "<th border='1' bordercolor=black style='background-color:rgb(217, 225, 242)'><center>" & Campo.Name & "</center></th>" & vbNewLine
                Next Campo
            
                'Fecha a linha do cabeçalho
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                'Itera sobre os registros da consulta para criar as linhas da tabela
                Do While Not rstTabela.EOF
                    'Abre uma nova linha para cada registro (TAG tr)
                    strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
            
                    'Itera sobre os campos do registro para criar as células
                    For Each Campo In rstTabela.Fields
                        ValorCelula = Campo.Value
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "'" & ValorCelula & "</center></td>" & vbNewLine
                    Next Campo
            
                    'Fecha a linha do registro
                    strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
            
                    'Vai para o próximo registro
                    rstTabela.MoveNext
                Loop
            
                'Fecha a tabela HTML
                strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
            End If
            
            'Fechando o registroset
            rstTabela.Close
        
            'Limpa as variáveis para evitar erros no envio de anexos
            NomeArquivo = ""
            PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo = ""
        
        'Se a quantidade de linhas é superio a 30 vai gerar a tabela no corpo do email
        ElseIf totalLinhas > 30 And qtdeColunas >= 2 Then
        
            'Vai ser enviado o anexo então não essa variável precisa ser limpa
            strHTMLTabela = ""
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("ProtestoEstoque")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta ProtestoEstoque_" & StrConv(rstListaProdutos("PRODUTO"), vbProperCase)
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaProtestoEstoque", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaProtestoEstoque"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PDIMOB_R_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "PRODUTO = '" & rstListaProdutos("PRODUTO") & "' " & _
                "ORDER BY CONTRATO;"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        'Incluo o e-mail do planejamento no envio do alerta como cópia
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        'Substituo a primeira virgula pela tag <br> que pula linha
        PosicaoDaPrimeiraVirgula = InStr(rstBaseAlertas("CORPOEMAIL"), ",")
        'Atribui a variável o assunto do email
        AssuntoEmail = "Alerta | " & StrConv(rstBaseAlertas("PRODUTO"), vbProperCase) & " - " & StrConv(rstBaseAlertas("ALERTA"), vbProperCase) & " | " & Date
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")

        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailProtestoEstoque(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaProdutos.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaCobrancaReembolsoAcima10DiasSemAtuacao()

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim faixaDias As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaVolume As String
Dim strHTMLTabelaEstaticaCorpo As String
Dim strHTMLTabelaEstaticaTotal As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset
Dim rstColunaFaixaDias As DAO.Recordset
Dim rstColunaResponsavel As DAO.Recordset


Debug.Print "RotinaAlertaCobrancaReembolsoAcima10DiasSemAtuacao"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertasCobrancaReembolsoAcima10DiasSemAtuacao"
Peridiocidade = "Diaria"

'Financeiro Oepracional - Reembolso>30dias

'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = UCase("Financeiro Operacional - Reembolso>10dias")
totalLinhas = 0
valorColunaTotalA = 0
valorColunaTotalB = 0
valorColunaTotalC = 0
valorColunaTotalD = 0
valorColunaTotalE = 0
valorColunaTotalF = 0
valorColunaTotalG = 0
valorColunaTotalGeral = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstColunaCliente = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing
Set rstColunaFaixaDias = Nothing
Set rstColunaResponsavel = Nothing



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Atribui a variável o ID da automação
'IdAutomacao = Mdl_Registro.ValidaIdAutomacao(NomeDaAutomacao)

'Identifica a frequencia com que a rotina deve ser executada
'Set rstFrequencia = CurrentDb.OpenRecordset("SELECT DISTINCT FREQUENCIA FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO WHERE UCASE(ALERTA) = '" & Alerta & "'")
'Se a função retornar TRUE executa a rotina
'Se a função retornar FALSE sairá dessa rotina
'If PDtec_MIS_EnvioAlertas.Rotina.ValidaFrequencia(rstFrequencia("FREQUENCIA")) = False Then Exit Function



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
'Retorna todos os produtos cadastrados na tabela
Set rstListaClientes = CurrentDb.OpenRecordset("SELECT DISTINCT CLIENTE FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY CLIENTE")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaClientes.EOF = False

    'Se tem dados entra nessa condição
    If rstListaClientes.EOF = False Then

        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        faixaDias = ""
        caractere = ""
        corpoTabela = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 12
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "MOTIVO"
        colunas.Add "FAIXA_DIAS_PENDENCIA"
        colunas.Add "RESPONSAVELPELOPGTO"
        colunas.Add "STATUSFINANCEIROHISTORICO"
        colunas.Add "STATUSFINANCEIRO"
        colunas.Add "RESPONSAVEL"
        colunas.Add "UF"
        colunas.Add "TIPO_DE_LANCAMENTO"
        colunas.Add "CLASSIFICACAO"
        colunas.Add "VALOR"
        colunas.Add "MAIORDATADELANCAMENTO"
        colunas.Add "DATA_DO_LANCAMENTO"
        colunas.Add "ID_LANCAMENTO"
        colunas.Add "PROCESSOID"
                       
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO", coluna & " IS NOT NULL AND UCASE(ALERTA) = '" & Alerta & "' AND CLIENTE = '" & rstListaClientes("CLIENTE") & "'")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                "ORDER BY PROCESSOID;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acSaveYes
        
        
        
        '__________________________ ANEXO __________________________
        'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
        Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("ReembolsoAcima10DiasSemAtuacao")
            
        '__________________________ EXPORTA ARQUIVO ANEXO __________________________
        '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
        NomeArquivo = "Alerta ReembolsoAcima10DiasSemAtuacao_"
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", CaminhoRede, NomeArquivo, "REEMBOLSOMAIOR30DIAS")
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao"
        
        
        
        '__________________________ LIMPA VARIÁVEL LOCAL __________________________
        concatenaColunas = ""
        
        
        
        '__________________________ DESENVOLVE A CONSULTA DA TABELA __________________________
        'Atribui a variável os dados que serão utilizados para preencher o relatório
        ConsultaDadosParaRelatorio = "SELECT RESPONSAVEL, FAIXA_DIAS_PENDENCIA AS [FAIXA DIAS DO LANÇAMENTO], SUM(VALOR) AS TOTAL " & _
            "FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                "GROUP BY RESPONSAVEL, FAIXA_DIAS_PENDENCIA " & _
                "ORDER BY RESPONSAVEL, FAIXA_DIAS_PENDENCIA;"
       
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acSaveYes
        
        '__________________________ TABELA __________________________
        'Atribui a variável o resultado da consulta criada
        Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao")
        
        'Cria a tabela que vai no corpo do e-mail
        If Not rstTabela.EOF Then
        
            'Inicializa a string HTML com a tag da tabela
            strHTMLTabela = "<table border='1' bordercolor=black>" & vbNewLine
        
            'Abre a primeira linha para o cabeçalho (TAG tr)
            strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
        
            'Itera sobre os campos da consulta para criar o cabeçalho da tabela
            For Each Campo In rstTabela.Fields
                strHTMLTabela = strHTMLTabela & "<th style='color: white; background-color: rgb(88, 89, 81);' border='1' bordercolor='black'><center>" & Campo.Name & "</center></th>" & vbNewLine
            Next Campo
        
            'Fecha a linha do cabeçalho
            strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
        
            'Itera sobre os registros da consulta para criar as linhas da tabela
            Do While Not rstTabela.EOF
                'Abre uma nova linha para cada registro (TAG tr)
                strHTMLTabela = strHTMLTabela & "<tr border='1' bordercolor=black>" & vbNewLine
        
                'Itera sobre os campos do registro para criar as células
                For Each Campo In rstTabela.Fields
                    'Atribui a variável o dado
                    ValorCelula = Campo.Value
                    'Se o valor do campo é tipo double ou integer (Numérico) entra na condição para editar o tipo de dado
                    If VarType(ValorCelula) = vbDouble Or VarType(ValorCelula) = vbInteger Then
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "" & Format(ValorCelula, "R$ 0.00") & "</center></td>" & vbNewLine
                    Else
                        strHTMLTabela = strHTMLTabela & "<td border='1' bordercolor=black><center>" & "" & ValorCelula & "</center></td>" & vbNewLine
                    End If
                Next Campo
        
                'Fecha a linha do registro
                strHTMLTabela = strHTMLTabela & "</tr>" & vbNewLine
        
                'Vai para o próximo registro
                rstTabela.MoveNext
            Loop
        
            'Fecha a tabela HTML
            strHTMLTabela = strHTMLTabela & "</table>" & vbNewLine
        End If
        
        'Fechando o registroset
        rstTabela.Close
    
        '__________________________ EXCLUSÃO DA CONSULTA DA TABELA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao"
        
        
            
        '__________________________ DESENVOLVE A CONSULTA DA TABELA 2 __________________________
        'Atribui a variável os dados que serão utilizados para preencher o relatório
        ConsultaDadosParaRelatorio = "SELECT RESPONSAVEL, FAIXA_DIAS_RESPONSAVEL AS [FAIXA DIAS DE PENDÊNCIA], SUM(VALOR) AS TOTAL " & _
            "FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "CLIENTE = '" & rstListaClientes("CLIENTE") & "' " & _
                "GROUP BY RESPONSAVEL, FAIXA_DIAS_RESPONSAVEL " & _
                "ORDER BY RESPONSAVEL, FAIXA_DIAS_RESPONSAVEL;"
       
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao", acSaveYes
            
            
         '__________________________ TABELA 2 __________________________
        'Atribui a variável o resultado da consulta criada
        Set rstTabela2 = CurrentDb.OpenRecordset("RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao")
        
        'Cria a tabela que vai no corpo do e-mail
        If Not rstTabela2.EOF Then
        
            'Inicializa a string HTML com a tag da tabela
            strHTMLTabela2 = "<table border='1' bordercolor=black>" & vbNewLine
        
            'Abre a primeira linha para o cabeçalho (TAG tr)
            strHTMLTabela2 = strHTMLTabela2 & "<tr border='1' bordercolor=black>" & vbNewLine
        
            'Itera sobre os campos da consulta para criar o cabeçalho da tabela
            For Each Campo In rstTabela2.Fields
                strHTMLTabela2 = strHTMLTabela2 & "<th style='color: white; background-color: rgb(88, 89, 81);' border='1' bordercolor='black'><center>" & Campo.Name & "</center></th>" & vbNewLine
            Next Campo
        
            'Fecha a linha do cabeçalho
            strHTMLTabela2 = strHTMLTabela2 & "</tr>" & vbNewLine
        
            'Itera sobre os registros da consulta para criar as linhas da tabela
            Do While Not rstTabela2.EOF
                'Abre uma nova linha para cada registro (TAG tr)
                strHTMLTabela2 = strHTMLTabela2 & "<tr border='1' bordercolor=black>" & vbNewLine
        
                'Itera sobre os campos do registro para criar as células
                For Each Campo In rstTabela2.Fields
                    'Atribui a variável o dado
                    ValorCelula = Campo.Value
                    'Se o valor do campo é tipo double ou integer (Numérico) entra na condição para editar o tipo de dado
                    If VarType(ValorCelula) = vbDouble Or VarType(ValorCelula) = vbInteger Then
                        strHTMLTabela2 = strHTMLTabela2 & "<td border='1' bordercolor=black><center>" & "" & Format(ValorCelula, "R$ 0.00") & "</center></td>" & vbNewLine
                    Else
                        strHTMLTabela2 = strHTMLTabela2 & "<td border='1' bordercolor=black><center>" & "" & ValorCelula & "</center></td>" & vbNewLine
                    End If
                Next Campo
        
                'Fecha a linha do registro
                strHTMLTabela2 = strHTMLTabela2 & "</tr>" & vbNewLine
        
                'Vai para o próximo registro
                rstTabela2.MoveNext
            Loop
        
            'Fecha a tabela HTML
            strHTMLTabela2 = strHTMLTabela2 & "</table>" & vbNewLine
        End If
        
        'Fechando o registroset
        rstTabela2.Close
            
            
        '__________________________ EXCLUSÃO DA CONSULTA DA TABELA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaCobrancaReembolsoAcima10DiasSemAtuacao"
            
            
    
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT CLIENTE, PRODUTO, ALERTA, DESTINATÁRIOS, CORPOEMAIL " & _
            "FROM PDIMOB_R_PDTEC_ALERTAS_IC_REEMBOLSO " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "' AND " & _
                "CLIENTE = '" & rstListaClientes("CLIENTE") & "' "
    
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATÁRIOS")
        EmailsEmCopia = "planejamento@pd.tec.br"
        AssuntoEmail = "Alerta | Reembolso acima de 10 dias sem atuação - Banco Santander Intimação e Consolidação | " & Date
        CorpoDoEmail = Replace(rstBaseAlertas("CORPOEMAIL"), "?", "?<br><br>")
        
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailCobrancaReembolsoAcima10DiasSemAtuacao(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))
    
    
    
        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        valorColunaTotalA = 0
        valorColunaTotalB = 0
        valorColunaTotalC = 0
        valorColunaTotalD = 0
        valorColunaTotalE = 0
        valorColunaTotalF = 0
        valorColunaTotalG = 0
        valorColunaTotalGeral = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstColunaCliente = Nothing
        Set rstConsultaAlertas = Nothing
        Set rstColunaFaixaDias = Nothing
        Set rstColunaResponsavel = Nothing
    
        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)
    
        'Vai para o próximo tipo de produto
        rstListaClientes.MoveNext

    End If

Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaClientes = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function



Public Function RotinaAlertaDocEletronicosIQe()

'Declara as variáveis locais
Dim qtdeLinhas As Long
Dim coluna As Variant
Dim colunas As Collection
Dim Alerta As String
Dim NomeArquivo As String
Dim concatenaColunas As String
Dim RelatorioAlertaSLA As String
Dim ConsultaDadosParaRelatorio As String
Dim ConsultaDadosParaEnvioDoEmail As String
Dim rstConsultaAlertas As QueryDef
Dim rstFrequencia As DAO.Recordset
Dim rstBaseAlertas As DAO.Recordset
Dim rstListaClientes As DAO.Recordset
Dim rstListaProdutos As DAO.Recordset
Dim primeiroDiaUtil As Date


Debug.Print "RotinaAlertaDocEletronicosIQe"


'_____________________________ TRATAMENTO DE ERRO _____________________________
'Se ocorrer erro continua o código | Neste caso se não tem dados na consulta da frequencia vai sair dessa função
On Error Resume Next



'_____________________________ CAPTURA O PROCESSAMENTO DA AUTOMAÇÃO _____________________________
InicioDoProcessamento = Timer
DataInicioDoProcessamento = Now
NomeDoCliente = "PDtec"
NomeDaAutomacao = "PDtec_MIS_EnvioAlertaDocEletronicosIQe"
Peridiocidade = "Mensal"



'_____________________________ ATRIBUI VALOR A VARIÁVEL LOCAL _____________________________
'Passe para a variável o nome do alerta para refletir todas as consultas
Alerta = "IQE"
totalLinhas = 0
Remetente = ""
AssuntoEmail = ""
CorpoDoEmail = ""
EmailsEmCopia = ""
Destinatarios = ""
strHTMLTabela = ""
ConsultaDadosParaRelatorio = ""
ConsultaDadosParaEnvioDoEmail = ""
Set rstTabela = Nothing
Set rstFrequencia = Nothing
Set rstBaseAlertas = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing
primeiroDiaUtil = PrimeiroDiaUtilDoMes(Year(Date), Month(Date)) 'Chame a função para obter o primeiro dia útil do mês



'_____________________________ PRÉ VERIFICAÇÃO DA PERIODICIDADE _____________________________
'Se a data atual ñ é o primeiro dia útil sai dessa rotina
If Date <> primeiroDiaUtil Then
    Exit Function
End If



'_____________________________ PRÉ-ROTINA PRINCIPAL _____________________________
Set rstListaProdutos = CurrentDb.OpenRecordset("SELECT DISTINCT PRODUTO FROM PRDBI_TBL_ALERTAS WHERE UCASE(ALERTA) = '" & Alerta & "' ORDER BY PRODUTO")



'_____________________________ ROTINA PRINCIPAL _____________________________
'Itera sobre os tipos de produto
Do While rstListaProdutos.EOF = False

    'Se tem dados entra nessa condição
    If rstListaProdutos.EOF = False Then

        '__________________________ ATRIBUI VALOR AS VARIÁVEIS LOCAIS __________________________
        caractere = ""
        concatenaColunas = ""
        qtdeLinhas = 0
        qtdeColunas = 35
        qtdePalavras = 0
        
        
        
        '__________________________ DESENVOLVE A CONSULTA __________________________
        'Crio uma nova coleção (Um tipo de lista)
        Set colunas = New Collection
        
        'Adiciona cada uma das colunas da tabela a nova coleção
        colunas.Add "STATUS"
        colunas.Add "NOME_ASSINANTE"
        colunas.Add "DATA_ASSINATURA"
        colunas.Add "STATUS_TQLG"
        colunas.Add "VALOR_QUITADO"
        colunas.Add "FORMA_QUITACAO"
        colunas.Add "DATA_QUITACAO"
        colunas.Add "VALOR_SALDO_DEVEDOR"
        colunas.Add "DATAS_DE_SALDO"
        colunas.Add "NOME_EMPREENDIMENTO"
        colunas.Add "NUM_UNIDADE_PRINCIPAL"
        colunas.Add "BLOCO"
        colunas.Add "CNPJ_VENDEDOR"
        colunas.Add "COTA"
        colunas.Add "GRUPO"
        colunas.Add "CPF_CNPJ_VENDEDOR"
        colunas.Add "NOME_VENDEDOR"
        colunas.Add "TIPO_OPERACAO"
        colunas.Add "ENDERECO_CEP"
        colunas.Add "ENDERECO_COMPLEMENTO"
        colunas.Add "ENDERECO_ESTADO"
        colunas.Add "ENDERECO_CIDADE"
        colunas.Add "ENDERECO_BAIRRO"
        colunas.Add "ENDERECO_NUMERO"
        colunas.Add "ENDERECO_LOGRADOURO"
        colunas.Add "NUM_CONTRATO"
        colunas.Add "PROTOCOLO"
        colunas.Add "DATA_MODIFICACAO"
        colunas.Add "FASE"
        colunas.Add "DATA_SOLICITACAO"
        colunas.Add "CNPJ_AF_COMPRADOR"
        colunas.Add "AF_COMPRADOR"
        colunas.Add "CNPJ_AF_VENDEDOR"
        colunas.Add "AF_VENDEDOR"
            
        'Itera sobre cada uma das colunas da coleção para contar a quantidade de linhas de cada coluna
        For Each coluna In colunas
            
            'Consulta a tabela e retorna a quantidade de linhas correspondente a coluna, alerta, cliente e produto
            qtdeLinhas = DCount("*", "PRDBI_IQE_PDTEC", coluna & " IS NOT NULL AND DATA_SOLICITACAO BETWEEN DateSerial(Year(Date()), Month(Date()) - 1, 1) AND DateSerial(Year(Date()), Month(Date()), 0)")
            
            'Se a quantidade de linhas é maior que zero entra nessa condição
            'A cada nova iteração concatena o NOME DA COLUNA para montar a query
            If qtdeLinhas > 0 Then concatenaColunas = coluna & ", " & concatenaColunas
            'A cada iteração atribui a variável recebe o maior valor para identificar a quantidade máxima de linhas
            If totalLinhas >= qtdeLinhas Then totalLinhas = totalLinhas Else totalLinhas = qtdeLinhas
            'Se ñ tem dados na linha então diminuimos a qtde de colunas que será enviada no corpo do email/anexo
            If qtdeLinhas = 0 Then qtdeColunas = qtdeColunas - 1
            
        Next coluna
        
        'Faz o tratamento da variável para remover vazios no fim da junção das colunas
        concatenaColunas = RTrim(concatenaColunas)
        'Verifica se o ultimo caractere é uma virgula
        caractere = Right(concatenaColunas, 1)
        'Atribui a variável a quantidade de caracteres da palavra e remove o espaço vazio da direita para esquerda
        qtdePalavras = Len(concatenaColunas)
        'Remove o ultimo caractere da palavra se for uma virgula
        If caractere = "," Then concatenaColunas = Mid(concatenaColunas, 1, qtdePalavras - 1)
        
        'Atribui a variável os dados que serão utilizados para preencher o relatório
         ConsultaDadosParaRelatorio = "SELECT " & concatenaColunas & " " & _
            "FROM PRDBI_IQE_PDTEC " & _
            "WHERE " & _
                "DATA_SOLICITACAO BETWEEN DateSerial(Year(Date()), Month(Date()) - 1, 1) AND DateSerial(Year(Date()), Month(Date()), 0)" & _
            "ORDER BY DATA_SOLICITACAO;"
                
        'Cria uma nova consulta e atribui a variável
        Set rstConsultaAlertas = CurrentDb.CreateQueryDef("RelatorioAlertaDocEletronicoIQe")
        
        'Atribui a consulta que foi criada vazia a query com os dados
        rstConsultaAlertas.SQL = ConsultaDadosParaRelatorio
        
        'Executa a consulta SQL para atualizar seus dados
        'Observação: Ao abrir a consulta seus dados são atualizados automaticamente
        DoCmd.OpenQuery "RelatorioAlertaDocEletronicoIQe", acViewNormal, acReadOnly
        
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (3000) '_____ Aguarda 3 segundos antes de continuar
        
        'Fecha a consulta salvando e atualizando
        DoCmd.Close acQuery, "RelatorioAlertaDocEletronicoIQe", acSaveYes
        
        
        
        '__________________________ GERA ANEXO __________________________
        Set rstTabela = CurrentDb.OpenRecordset("RelatorioAlertaDocEletronicoIQe")
            
        'Cria a tabela que vai no corpo do e-mail
        If Not rstTabela.EOF Then
        
            'Gerencia e atribui o caminho da rede | Precisa passar o nome da pasta como parâmetro
            Call PDtec_MIS_EnvioAlertas.Rotina.CriaCaminhoRede("IQe")
            
            '__________________________ EXPORTA ARQUIVO ANEXO __________________________
            '_____ Chama Sub Rotina - Exporta a consulta salvando os dados em um arquivo Excel que já existe
            NomeArquivo = "Alerta IQe"
            Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.ExportaTabelasArquivoExcel("RelatorioAlertaDocEletronicoIQe", CaminhoRede, NomeArquivo, Alerta)
        
        End If
        
        
        
        '__________________________ EXCLUSÃO DA CONSULTA __________________________
        CurrentDb.QueryDefs.Delete "RelatorioAlertaDocEletronicoIQe"
        
        
        
        '__________________________ ENVIO DO EMAIL __________________________
        'Atribui a variável os dados que serão utilizados para fazer o envio do e-mail
        ConsultaDadosParaEnvioDoEmail = "SELECT DATA, DESTINATARIOS, CC, CORPOEMAIL " & _
            "FROM PRDBI_TBL_ALERTAS " & _
            "WHERE " & _
                "UCASE(ALERTA) = '" & Alerta & "';"
        
        'Atribui a variável os dados da consulta para envio do e-mail
        Set rstBaseAlertas = CurrentDb.OpenRecordset(ConsultaDadosParaEnvioDoEmail)
        
        'Atribui o valor as variáveis
        Remetente = "relatorios@pd.tec.br"
        Destinatarios = rstBaseAlertas("DESTINATARIOS")
        EmailsEmCopia = rstBaseAlertas("CC") & "; planejamento@pd.tec.br"
        CorpoDoEmail = rstBaseAlertas("CORPOEMAIL")
        AssuntoEmail = "Alerta | IQe Confirmação de Cobrança | " & Format(rstBaseAlertas("DATA"), "mm/yyyy")
    
        'Envia o email com base na tabela de alertas | Passo o anexo como parâmetro dentro de um array | A variável do anexo está em outro módul
        Call PDtec_MIS_EnvioAlertas.Mdl_Suporte.EnviaEmailDocEletronicoIQe(Remetente, Destinatarios, EmailsEmCopia, AssuntoEmail, CorpoDoEmail, , Array(PDtec_MIS_EnvioAlertas.Mdl_Suporte.ArquivoAnexo))



        '_____________________________  LIMPA AS VARIÁVEIS _____________________________
        totalLinhas = 0
        Remetente = ""
        AssuntoEmail = ""
        CorpoDoEmail = ""
        EmailsEmCopia = ""
        Destinatarios = ""
        strHTMLTabela = ""
        ConsultaDadosParaRelatorio = ""
        ConsultaDadosParaEnvioDoEmail = ""
        Set rstBaseAlertas = Nothing
        Set rstConsultaAlertas = Nothing

        '_____ Aguarda 20 segundos antes de enviar o próximo e-mail
        PDtec_MIS_EnvioAlertas.Rotina.Sleep (20000)

        'Vai para o próximo cliente
        rstListaProdutos.MoveNext
    
    End If
    
Loop



'_____________________________  LIMPA AS VARIÁVEIS _____________________________
Set rstBaseAlertas = Nothing
Set rstListaProdutos = Nothing
Set rstConsultaAlertas = Nothing



'_____________________________  REGISTRO DO PROCESSAMENTO DA AUTOMAÇÃO _____________________________
'Envia um e-amail com o tempo de processamento
'Call Mdl_Emails.EnviaEmailTempoProcessamento("monitoramento.automacao@pd.tec.br", "tiago.goulart@pd.tec.br", NomeDoCliente, NomeDaAutomacao, Peridiocidade, InicioDoProcessamento, DataInicioDoProcessamento)
'Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
'Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", NomeDoCliente, IdAutomacao, NomeDaAutomacao, Peridiocidade, DataInicioDoProcessamento, Now)

End Function
