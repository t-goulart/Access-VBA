Option Compare Database



Public Function RegistraEnvioEmail(IdAutomacao As Integer, Automacao As String, Cliente As String, EmailTipo As String, EmailRemetente As String, EmailDestinatario As String, Optional EmailCopia As String, Optional EmailCopiaOculta As String, Optional EmailAssunto As Variant)
'Função que registra o envio de cada um dos e-mails dentro de um arquivo Access dentro da VM

'Insere na tabela informada os dados passados como parâmetro
DoCmd.RunSQL "INSERT INTO _BASE (ID_AUTOMACAO, AUTOMACAO, CLIENTE, DATA, EMAIL_TIPO, EMAIL_REMETENTE, EMAIL_DESTINATARIO, EMAIL_COPIA, EMAIL_COPIAOCULTA, EMAIL_ASSUNTO) " & _
    " VALUES " & _
    "(" & IdAutomacao & ", '" & Automacao & "', '" & Cliente & "','" & Now & "','" & EmailTipo & "', '" & EmailRemetente & "', '" & EmailDestinatario & "', '" & EmailCopia & "', '" & EmailCopiaOculta & "', '" & EmailAssunto & "')"

End Function



Public Function ValidaIdAutomacao(NomeDaAutomacao As String) As Variant

'Declara variável local
Dim ConsultaIdAutomacao As String
Dim rstIdAutomacao As DAO.Recordset



'__________________________ ROTINA PRINCIPAL __________________________
'Atribui a variável uma consulta que verifica o histórico de automações executadas hoje e retorna o ID no agendador
ConsultaIdAutomacao = "" & _
    "SELECT TOP 1 ID_AA " & _
    "FROM TBL_AUTOMACAO " & _
    "WHERE " & _
    "AUTOMACAO = '" & NomeDaAutomacao & "' " & _
    "AND ID_AA NOT IN(SELECT ID_MA FROM PRDBI_MONITORAMENTO_AUTOMACOES WHERE AUTOMACAO = '" & NomeDaAutomacao & "' AND FORMAT(INICIO_PROCESSAMENTO, 'DD/MM/YYYY') = FORMAT(NOW(), 'DD/MM/YYYY')) " & _
    "ORDER BY HORARIO;"

'Atribui a consulta ao recordset
Set rstIdAutomacao = CurrentDb.OpenRecordset(ConsultaIdAutomacao)

'Se tem dados no recordset entra nessa condição
If Not rstIdAutomacao.EOF Then

    'Atribui a variável o valor do ID
    ValidaIdAutomacao = rstIdAutomacao("ID_AA")

Else
    
    'Atribui a variável uma consulta que retorna o maior ID que está no agendador com base no nome da automação
    ConsultaIdAutomacao = "" & _
        "SELECT TOP 1 ID_AA " & _
        "FROM TBL_AUTOMACAO " & _
        "WHERE AUTOMACAO = '" & NomeDaAutomacao & "' ORDER BY HORARIO DESC;"
    
    'Atribui a consulta ao recordset
    Set rstIdAutomacao = CurrentDb.OpenRecordset(ConsultaIdAutomacao)

    'Atribui a variável o valor do ID
    ValidaIdAutomacao = rstIdAutomacao("ID_AA")

End If



'__________________________ LIMPA AS VARIÁVEIS __________________________
rstIdAutomacao.Close
Set rstIdAutomacao = Nothing

End Function


Public Function ValidaFrequencia(Valor As Variant) As Boolean
'Função para identificar se a rotina deve ser executada no dia atual

'Variáveis locais
Dim RetornaDiaSemana As Integer

'Atribui valor as variáveis fazendo as verificações necessárias
RetornaDiaSemana = CInt(Format(Now(), "w"))
ProcuraDiaSemanaNoParametro = InStr(Valor, RetornaDiaSemana)

'Se o valor do parâmetro é igual a 1 retorna TRUE
If ProcuraDiaSemanaNoParametro >= 1 Then
    ValidaFrequencia = True
Else
    ValidaFrequencia = False
End If

End Function

Public Sub RegistraTempoProcessamentoOracle(NomeTabela As String, Cliente As String, IdAutomacao As Integer, NomeAutomacao As String, Peridiocidade As String, InicioProcessamento As Variant, TerminoProcessamento As Variant)
'_____ Rotina que salva os dados referentes ao tempo de processamento da automação em uma tabela no Oracle
' Parâmetros: _
    NomeTabela: Nome da tabela que recebe os dados de processamento (PRDBI_MONITORAMENTO_AUTOMACOES) _
    Cliente: Nome do cliente (Itau, Santander, Banco Inter, etc.) _
    NomeAutomacao: Nome da automação ("IQe_Automacao_Emails","BB_Intimacao_E-mails", etc) _
    Peridiocidade: Diário, semanal, mensal, etc. _
    InicioProcessamento: Passe o valor da variável que indica quando começou o processamento _
    TerminoProcessamento: Chame a função Now para registrar o término do processamento
'- Como usar? _
    ' 1 - Declare essa variável fora do escopo das rotinas: Public DataInicioDoProcessamento
    ' 2 - Atribuia o valor dessa variável incio do primeiro código: DataInicioDoProcessamento = Now
    ' 3 - Copie o código abaixo e apenas substituia os campos de cliente, automação e peridiocidade:
        ' Salva na tabela MONITORAMENTO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
        ' Call Mdl_Registro.RegistraTempoProcessamentoOracle("PRDBI_MONITORAMENTO_AUTOMACOES", "IQe", "IQe_Automacao_Emails", "Diaria", DataInicioDoProcessamento, Now)

'Declara as varuáveis locais
Dim ConsultaTabelaMonitoramento As String
Dim BaseDeDados As DAO.Database
Dim rsMonitoramentoOracle As DAO.Recordset




'_____________________________ ATRIBUI VALOR AS VARIÁVEIS_____________________________
' Verifica se já existe um registro com o mesmo ID na tabela
ConsultaTabelaMonitoramento = "SELECT * FROM " & NomeTabela & " WHERE ID_MA = " & IdAutomacao & " AND FORMAT(INICIO_PROCESSAMENTO,'DD/MM/YYYY') LIKE '" & Date & "'"
Set BaseDeDados = CurrentDb()
Set rsMonitoramentoOracle = BaseDeDados.OpenRecordset(ConsultaTabelaMonitoramento, dbOpenDynaset)

Debug.Print rsMonitoramentoOracle.RecordCount

'_____________________________ ROTINA PRINCIPAL _____________________________
If Not rsMonitoramentoOracle.EOF And rsMonitoramentoOracle.RecordCount > 0 Then

    rsMonitoramentoOracle.Edit
        rsMonitoramentoOracle("ID_MA") = IdAutomacao
        rsMonitoramentoOracle("INICIO_PROCESSAMENTO") = InicioProcessamento
        rsMonitoramentoOracle("TERMINO_PROCESSAMENTO") = TerminoProcessamento

    rsMonitoramentoOracle.Update

Else
    
    'Não existe um registro com o mesmo ID, insere um novo registro
    ConsultaTabelaMonitoramento = "INSERT INTO " & NomeTabela & " (ID_MA, CLIENTE, AUTOMACAO, PERIDIOCIDADE, INICIO_PROCESSAMENTO, TERMINO_PROCESSAMENTO) " & _
             "VALUES ('" & IdAutomacao & "', '" & Cliente & "', '" & NomeAutomacao & "', '" & Peridiocidade & "', '" & InicioProcessamento & "', '" & TerminoProcessamento & "')"
    
    'Executa a instrução SQL
    CurrentDb.Execute ConsultaTabelaMonitoramento

End If



'_____________________________ FECHA A CONEXÃO _____________________________
rsMonitoramentoOracle.Close



'_____________________________ LIMPA A VARIÁVEL LOCAL _____________________________
Set BaseDeDados = Nothing
Set rsMonitoramentoOracle = Nothing

End Sub



Public Sub RegistraErroProcessamentoOracle(NomeTabela As String, NomeDoCliente As String, NomeDaAutomacao As String, NumeroDoErro As Variant, DescricaoDoErro As Variant, Periodicidade As Variant, DataErro As Variant)
'_____ Rotina que salva os dados referentes ao erro de processamento da automação em uma tabela no Oracle
'- Parâmetros: _
    NomeTabela: Nome da tabela que recebe os dados de processamento (PRDBI_MONITORAMENTO_AUTOMACOES) _
    Cliente: Nome do cliente (Itau, Santander, Banco Inter, etc.) _
    NomeAutomacao: Nome da automação ("IQe_Automacao_Emails","BB_Intimacao_E-mails", etc) _
    NumeroDoErro: Passe o número do erro (Err.Number) _
    DescricaoDoErro: Passe a descrição do erro (Err.Description) _
    Peridiocidade: Diário, semanal, mensal, etc. _
    DataErro: Chame a função Now para registrar o término do processamento
'- Como usar? Copie o código abaixo e apenas substituia os campos de cliente e peridiocidade:
    ' Salva na tabela PRDBI_ERRO_AUTOMACOES (ASSINADOR 2.0) os dados do processamento dessa automação
    ' Call Mdl_Registro.RegistraErroProcessamentoOracle("PRDBI_ERRO_AUTOMACOES", "IQe", Err.Source, Err.Number, Err.Description, "Diário", Now)

' Insere na tabela informada os dados passados como parâmetro
DoCmd.RunSQL "INSERT INTO " & NomeTabela & " (CLIENTE, AUTOMACAO, N_ERRO, DESCRICAO_ERRO, PERIDIOCIDADE, DATA_ERRO) " & _
    " VALUES " & _
    "('" & NomeDoCliente & "', '" & NomeDaAutomacao & "', " & NumeroDoErro & ",'" & Replace(DescricaoDoErro, "'", "") & "','" & Periodicidade & "', '" & DataErro & "')"

End Sub





